@page "/chess"
@using ChessMate.Services
@using ChessMate.Utilities
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ChessGame game

<h3>Chess Game</h3>

<table class="chessboard">
    <thead>
        <!-- Add column headers -->
        <tr>
            <th></th> <!-- Empty corner cell -->
            @for (char col = 'a'; col <= 'h'; col++)
            {
                <th>@col</th> <!-- Column labels (a, b, c, ...) -->
            }
            <th></th> <!-- Empty cell for symmetry -->
        </tr>
    </thead>
    <tbody>
        @for (int row = 0; row < 8; row++)
        {
            int currentRow = row; // capture row locally
            <tr>
                <th>@(8 - currentRow)</th> <!-- Row label (8, 7, 6, ...) -->
                @for (int col = 0; col < 8; col++)
                {
                    int currentCol = col; // capture col locally
                    <td @onclick="() => SelectSquare(currentRow, currentCol)" class="@GetSquareClass(currentRow, currentCol)">
                        @(game.Board.ChessPieces[currentRow, currentCol]?.Representation ?? "")
                    </td>
                }
                <th>@(8 - currentRow)</th> <!-- Row label on the other side -->
            </tr>
        }
    </tbody>
    <tfoot>
        <!-- Add column headers at the bottom -->
        <tr>
            <th></th> <!-- Empty corner cell -->
            @for (char col = 'a'; col <= 'h'; col++)
            {
                <th>@col</th> <!-- Column labels (a, b, c, ...) -->
            }
            <th></th> <!-- Empty cell for symmetry -->
        </tr>
    </tfoot>
</table>

<p>Selected Square: @selectedSquare</p>
<p>Last Move: @lastMove</p>

@code {
    private HubConnection? hubConnection;
    private string? selectedSquare;
    private string? lastMove;

    // We'll store the currently selected position as a tuple.
    private (int row, int col)? selectedPosition;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chesshub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMove", async (start, end) =>
        {
            lastMove = $"{start} -> {end}";
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task SelectSquare(int row, int col)
    {
        string notation = ChessNotationUtility.ToChessNotation((row, col));

        if (selectedPosition == null)
        {
            var piece = game.Board.ChessPieces[row, col];
            if (piece != null)
            {
                selectedPosition = (row, col);
                selectedSquare = notation;
            }
        }
        else
        {
            var (startRow, startCol) = selectedPosition.Value;
            string fromNotation = ChessNotationUtility.ToChessNotation((startRow, startCol));
            bool moveSuccess = game.MovePiece(fromNotation, notation);

            if (moveSuccess)
            {
                lastMove = $"{fromNotation} -> {notation}";
            }

            selectedPosition = null;
            selectedSquare = null;
        }

        await InvokeAsync(StateHasChanged);
    }

    private string GetSquareClass(int row, int col)
    {
        return (row + col) % 2 == 0 ? "light" : "dark";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

